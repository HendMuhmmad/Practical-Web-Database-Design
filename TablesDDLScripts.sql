CREATE TABLE CATEGORY(
    ID INTEGER AUTO_INCREMENT,
    NAME VARCHAR(100),
    DESCRIPTION VARCHAR(1000),
    PARENT_ID INTEGER,
    PRIMARY KEY (ID),
    FOREIGN KEY (PARENT_ID ) REFERENCES CATEGORY(ID)
);

CREATE TABLE PRODUCT(
    ID INTEGER AUTO_INCREMENT,
    NAME VARCHAR(100) NOT NULL, 
    SHORT_DESCRIPTION VARCHAR(500),
	LONG_DESCRIPTION VARCHAR(2000),
	SIZE VARCHAR(50),
	COLOR VARCHAR(10),
	WEIGHT DECIMAL(7.2),
	PRICE DECIMAL(7,2) NOT NULL,
	QUANTITY SMALLINT NOT NULL,
	PICTURE VARCHAR(100),
	DISCOUNTS DECIMAL(7,2) NOT NULL,
	SHIPPING_COST DECIMAL(7,2) NOT NULL,
    IS_AVAILABLE DECIMAL(1,0) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE PRODUCT_CATEGORY(
    CATEGORY_ID INTEGER,
    PRODUCT_ID INTEGER,
    DEFAULT_CATEGORY DECIMAL(1,0) NOT NULL,
	PRIMARY KEY (CATEGORY_ID, PRODUCT_ID),
    FOREIGN KEY (CATEGORY_ID ) REFERENCES CATEGORY(ID),
	FOREIGN KEY (PRODUCT_ID ) REFERENCES PRODUCT(ID)
);


CREATE TABLE CUSTOMER(
    ID INTEGER AUTO_INCREMENT,
	FIRST_NAME VARCHAR(50), 
	LAST_NAME VARCHAR(50),
	EMAIL VARCHAR(100) NOT NULL,
	PASSWORD VARCHAR(20) NOT NULL,
	USERNAME VARCHAR(20) NOT NULL,
    PRIMARY KEY (ID)
);


CREATE TABLE CUSTOMER_ADDRESS(
    ID INTEGER AUTO_INCREMENT,
	CUSTOMER_ID INTEGER NOT NULL,
	STREET VARCHAR(100) NOT NULL,
	BUILDING VARCHAR(10) NOT NULL,
	FLOOR VARCHAR(10),
	APARTMENT VARCHAR(10),
	CITY VARCHAR(100) NOT NULL,
	COUNTRY VARCHAR(100) NOT NULL,
	POSTAL_CODE VARCHAR(10),
	COMMENTS VARCHAR(1000),
    PRIMARY KEY (ID),
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(ID)
);

CREATE TABLE PRODUCT_COMMENTS(
    ID INTEGER AUTO_INCREMENT,
	PRODUCT_ID INTEGER NOT NULL, 
	CUSTOMER_ID INTEGER NOT NULL,
	COMMENT VARCHAR(1000) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (PRODUCT_ID ) REFERENCES PRODUCT(ID),
	FOREIGN KEY (CUSTOMER_ID ) REFERENCES CUSTOMER(ID)
);


CREATE TABLE ORDERS(
    ID INTEGER AUTO_INCREMENT,
	CUSTOMER_ID INTEGER NOT NULL, 
	TOTAL_COST DECIMAL(7,2) NOT NULL,
	TAXES DECIMAL(7,2) NOT NULL,
	DISCOUNT DECIMAL(7,2) NOT NULL,
	SHIPPING_COST DECIMAL(7,2) NOT NULL,
	ORDER_DATE DATETIME NOT NULL,
	ORDER_SHIP_DATE DATETIME NOT NULL,
    PRIMARY KEY (ID),
	FOREIGN KEY (CUSTOMER_ID ) REFERENCES CUSTOMER(ID)
);


CREATE TABLE ORDER_DETAIL(
    ORDER_ID INTEGER,
	PRODUCT_ID INTEGER, 
	QUANTITY SMALLINT NOT NULL,
    PRIMARY KEY (ORDER_ID,PRODUCT_ID),
	FOREIGN KEY (PRODUCT_ID ) REFERENCES PRODUCT(ID),
	FOREIGN KEY (ORDER_ID ) REFERENCES ORDERS(ID)
);


CREATE TABLE SALES_HISTORY(
    ID INTEGER AUTO_INCREMENT,
	CUSTOMER_ID INTEGER NOT NULL,
	CUSTOMER_FIRST_NAME VARCHAR(50), 
	CUSTOMER_LAST_NAME VARCHAR(50),
	CUSTOMER_EMAIL VARCHAR(100) NOT NULL,
	ORDER_ID INTEGER,
	ORDER_DATE DATETIME NOT NULL,
	ORDER_SHIP_DATE DATETIME NOT NULL,
	ORDER_TOTAL_COST DECIMAL(7,2) NOT NULL,
	ORDER_SHIPPING_COST DECIMAL(7,2) NOT NULL,
	PRODUCT_ID INTEGER,
	PRODUCT_DEFAULT_CATEGORY_ID INTEGER NOT NULL,
	CATEGORY_NAME VARCHAR(100),
	PRODUCT_NAME VARCHAR(100) NOT NULL, 
    PRODUCT_SHORT_DESCRIPTION VARCHAR(500),
	PRODUCT_LONG_DESCRIPTION VARCHAR(2000),
	PRODUCT_SIZE VARCHAR(10),
	PRODUCT_COLOR VARCHAR(10),
	PRODUCT_WEIGHT DECIMAL(7.2),
	PRODUCT_PRICE DECIMAL(7,2) NOT NULL,
	PRODUCT_QUANNTITY SMALLINT NOT NULL,
    PRIMARY KEY (ID),
	FOREIGN KEY (CUSTOMER_ID ) REFERENCES CUSTOMER(ID),
	FOREIGN KEY (PRODUCT_ID ) REFERENCES PRODUCT(ID),
	FOREIGN KEY (ORDER_ID ) REFERENCES ORDERS(ID),
	FOREIGN KEY (PRODUCT_DEFAULT_CATEGORY_ID ) REFERENCES CATEGORY(ID)
);

CREATE  TRIGGER SALES_HISORY_TRIGGER  
AFTER INSERT ON ORDER_DETAIL FOR EACH ROW   
INSERT INTO SALES_HISTORY (CUSTOMER_ID,
	CUSTOMER_FIRST_NAME, 
	CUSTOMER_LAST_NAME,
	CUSTOMER_EMAIL,
	ORDER_ID,
	ORDER_DATE,
	ORDER_SHIP_DATE,
	ORDER_TOTAL_COST,
	ORDER_SHIPPING_COST,
	PRODUCT_ID ,
	PRODUCT_DEFAULT_CATEGORY_ID,
	CATEGORY_NAME,
	PRODUCT_NAME, 
    PRODUCT_SHORT_DESCRIPTION,
	PRODUCT_LONG_DESCRIPTION,
	PRODUCT_SIZE,
	PRODUCT_COLOR,
	PRODUCT_WEIGHT,
	PRODUCT_PRICE,
	PRODUCT_QUANNTITY) 
	select C.ID ,C.FIRST_NAME ,C.LAST_NAME ,C.EMAIL ,O.ID ,O.ORDER_DATE ,O.ORDER_SHIP_DATE ,O.TOTAL_COST ,O.SHIPPING_COST ,P.ID ,CA.ID ,CA.NAME,
	P.NAME, P.SHORT_DESCRIPTION , P.LONG_DESCRIPTION , P.`SIZE` ,P.COLOR ,P.WEIGHT ,P.PRICE ,new.QUANTITY
	FROM orders o , order_detail od , customer c ,product p , product_category pc , category ca
	WHERE o.ID = od.ORDER_ID 
	and OD.PRODUCT_ID = P.ID 
	and O.CUSTOMER_ID  = C.ID 
	and PC.PRODUCT_ID = P.ID 
	and PC.CATEGORY_ID = ca.ID 
	and PC.DEFAULT_CATEGORY = 1
	and o.ID = new.ORDER_ID
	and p.ID = new.PRODUCT_ID;




